"use strict";(self.webpackChunkdocs_riscv_org=self.webpackChunkdocs_riscv_org||[]).push([[2608],{1354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"spec/non-isa/qos","title":"Capacity and Bandwidth QoS Register Interface","description":"Specifies:","source":"@site/docs/spec/non-isa/qos-interface.md","sourceDirName":"spec/non-isa","slug":"/spec/non-isa/qos","permalink":"/docs.riscv.org/docs/spec/non-isa/qos","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/spec/non-isa/qos-interface.md","tags":[],"version":"current","frontMatter":{"title":"Capacity and Bandwidth QoS Register Interface","id":"qos"},"sidebar":"specSidebar","previous":{"title":"Efficient Trace","permalink":"/docs.riscv.org/docs/spec/non-isa/efficient-trace"}}');var r=n(4848),c=n(8453);const o={title:"Capacity and Bandwidth QoS Register Interface",id:"qos"},i=void 0,a={},d=[];function p(e){const t={p:"p",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Specifies:"}),"\n",(0,r.jsx)(t.p,{children:"QoS identifiers to identify workloads that originate requests to the shared resources."}),"\n",(0,r.jsx)(t.p,{children:"Access-type identifiers to accompany request to access a shared resource to allow differentiated treatment of each access-type."}),"\n",(0,r.jsx)(t.p,{children:"Register interface for capacity allocation in controllers such as shared caches, directories, etc."}),"\n",(0,r.jsx)(t.p,{children:"Register interface for capacity usage monitoring."}),"\n",(0,r.jsx)(t.p,{children:"Register interface for bandwidth allocation in controllers such as interconnect and memory\ncontrollers."}),"\n",(0,r.jsx)(t.p,{children:"Register interface for bandwidth usage monitoring."})]})}function f(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const r={},c=s.createContext(r);function o(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);